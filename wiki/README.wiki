#summary Installation and Usage Instructions for DAGGER.

== Contents == 
The package is available as a compressed *DAGGER* folder in [http://code.google.com/p/dagger-index/downloads/list Downloads] and as browsable files in [http://code.google.com/p/dagger-index/source/browse Source]. Once compiled, the package provides the following executables:

  # *DGRAIL*: The main executable which evaluates the performance of DAGGER, DFS or BFS on a given input graph and an _update file_ (a file that lists the changes to be applied to the graph).
  # *correctness*: It checks the correctness of DAGGER/DFS/BFS by comparing the result of each query on a given input graph and update file.
  # *Graph Generators*: Random graph generators.
      * *erGenerator*: Generates a random graph in Erdos-Renyi Model.
      * *baGenerator*: Generates a random graph in Barabasi-Albert Model.
  # *testGenerator*: Given an input graph, it generates a random sequence of valid update operations which can be used to evaluate reachability indices.
  # *Graph Extractors*: These extracts an input(i.e., initial) graph from a list of updates and outputs in .gra format. The reason we need this tool is that in some cases updates are available from an empty graph but we want to simulate the evolution of the graph after some point. Therefore these tools apply the updates up to that point, output that graph in .gra format and also output the remaining updates as an update file.
      * *graphExtractorFromPairs*:
      * *graphExtractor*:

== Installation ==
A simple _make_ command in the folder would compile all the code as long as the c++ compiler supports the [http://en.wikipedia.org/wiki/C%2B%2B0x C++0x] standard. It is because of the dependency to the [http://en.wikipedia.org/wiki/Unordered_map_(C%2B%2B) hashmap]s.

Please note that in some very large input graphs DGRAIL may give segmentation fault due to stack overflow. The reason is that in a very highly connected graph, a DFS can go very deep during the search. You can overcome this problem by setting a higher stack size.

Example: _ulimit -s 200000 